{
  "welcome_message": "Welcome to Training Material",
  "candidate_name": "Candidate Name",
  "choose_lot": "Choose a Lot",
  "start_quiz": "Start Quiz",
  "github_pat": "Enter your GitHub PAT",
  "validate_pat": "Validate PAT",
  "pat_validated": "PAT validated successfully!",
  "reset_pat": "Reset PAT",
  "edit_questions": "Edit Questions",
  "filter_by_lot": "Filter by Lot",
  "all_lots": "All Lots",
  "add_question": "Add Question",
  "scores": "Scores",
  "result": "Result",
  "score_message": "Your score:",
  "save_results": "Save Results",
  "save_results_success": "Results saved successfully!",
  "save_current_score": "Save Current Score",
  "save_current_success": "Current score saved successfully!",
  "scores_local": "Score saved locally (no PAT provided).",
  "validate": "Validate",
  "no_questions": "No questions available.",
  "select_answer": "Please select an answer.",
  "enter_name": "Please enter your name.",
  "select_lot_prompt": "Please select a lot.",
  "questions_not_loaded": "Questions have not been loaded.",
  "no_questions_loaded": "No questions were loaded.",
  "no_questions_for_lot": "No questions available for this lot.",
  "no_questions_to_save": "No questions to save.",
  "no_pat": "No GitHub PAT provided.",
  "invalid_pat": "Invalid GitHub PAT.",
  "questions_load_error": "Error loading questions: ",
  "questions_error": "Error saving questions: ",
  "scores_error": "Error saving scores: ",
  "scores_saved": "Scores saved successfully!",
  "notification_scores": "Scores updated on GitHub.",
  "mermaid_editor_title": "Mermaid Live Editor",
  "mermaid_input_placeholder": "Write your Mermaid code here...",
  "mermaid_empty": "Enter Mermaid code to see the rendering.",
  "mermaid_load_error": "Error: Unable to load Mermaid.",
  "mermaid_render_error": "Mermaid rendering error",
  "mermaid_export_error": "No diagram to export. Please render a valid diagram first.",
  "loading": "Loading...",
  "converter_title": "Document Converter",
  "converter_file_label": "Upload a file:",
  "converter_text_label": "Or enter free text:",
  "converter_text_placeholder": "Enter text to convert...",
  "converter_from_label": "Convert from:",
  "converter_to_label": "Convert to:",
  "converter_button": "Convert",
  "converter_empty": "Please provide a file or text to convert.",
  "converter_error": "Error during conversion",
  "mammoth_load_error": "Error: Unable to load Mammoth.",
  "showdown_load_error": "Error: Unable to load Showdown.",
  "pdfjs_load_error": "Error: Unable to load pdf.js.",
  "file_read_error": "Error reading the file",
  "download_result": "Download the result",
  "json_validator_title": "JSON Validator",
  "json_input_placeholder": "Enter your JSON here... (e.g. {\"key\": \"value\"})",
  "json_validate_button": "Validate JSON",
  "json_empty": "Please enter a JSON to validate.",
  "json_valid": "JSON valid!",
  "json_invalid": "JSON invalid",
  "ajv_load_error": "Error: Unable to load AJV.",
  "cicd_course_title": "CI/CD Course",
  "cicd_course_content": "# Introduction to CI/CD\n\n## What is CI/CD?\n\n**CI/CD** (Continuous Integration / Continuous Deployment) is a DevOps practice that automates the software development process. It consists of two main parts:\n\n- **CI (Continuous Integration)**: Developers frequently integrate their code into a shared repository, and each integration is verified by automated tests.\n- **CD (Continuous Deployment)**: Tested code is automatically deployed to production or a staging environment.\n\n## Typical Steps in a CI/CD Pipeline\n\n1. **Code**: Developers write and submit code via a version control system (e.g., Git).\n2. **Build**: The code is compiled or prepared for testing.\n3. **Test**: Automated tests (unit, integration, etc.) are executed.\n4. **Deploy**: The code is deployed to an environment (staging or production).\n\n## Popular Tools\n\n- **Jenkins**: An open-source automation server.\n- **GitHub Actions**: Integrated with GitHub to automate workflows.\n- **GitLab CI/CD**: Integrated with GitLab to manage pipelines.\n- **CircleCI**: A cloud-based CI/CD platform.\n\n## Example GitHub Actions Workflow\n\n```yaml\nname: CI/CD Pipeline\non:\n  push:\n    branches: [ main ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n    - name: Install dependencies\n      run: npm install\n    - name: Run tests\n      run: npm test\n    - name: Deploy\n      run: echo \"Deploying to production\"\n```\n\n## Benefits of CI/CD\n\n- **Speed**: Deployments are more frequent and faster.\n- **Quality**: Automated tests reduce bugs.\n- **Collaboration**: Teams work more efficiently.",
  "cicd_render_error": "Error rendering the course",
  "marked_load_error": "Error: Unable to load Marked.",
  "start_quiz_tab": "Start Quiz",
  "edit_questions_tab": "Edit Questions",
  "scores_tab": "Scores",
  "mermaid_editor_tab": "Mermaid Live Editor",
  "converter_tab": "Document Converter",
  "json_validator_tab": "JSON Validator",
  "cicd_course_tab": "CI/CD Course",
  "logic_tests_tab": "Logic & Soft Skills Challenges",
  "close": "Close",
  "modal_details_title": "Question Details",
  "modal_question_fr": "Question (FR)",
  "modal_question_us": "Question (US)",
  "modal_options": "Options",
  "modal_lot": "Lot",
  "modal_type": "Type",
  "modal_details_unavailable": "Details unavailable or format not supported.",
  "correct": "Correct",
  "incorrect": "Incorrect",
  "incorrect_no_selection": "Incorrect (no answer selected)",
  "mermaid_cheat_sheet_title": "Help for Mermaid Live Editor",
  "mermaid_cheat_sheet_instructions": "- Write your Mermaid code in the field on the left.\n- The diagram will be automatically rendered on the right.\n- Use the buttons below to insert example code snippets.\n- Click \"Export as SVG\" or \"Export as PNG\" to save your diagram.",
  "mermaid_cheat_sheet_basic_syntax": "- Declare the diagram type with `graph TD` (top-down) or `graph LR` (left-to-right).\n- Use `-->` for a simple arrow, `==>` for a thick arrow, or `-.->` for a dotted arrow.\n- Add labels to arrows with `|Text|`, e.g., `A -->|Action| B`.\n- **Important:** Do not use semicolons (`;`) to separate statements. Use line breaks instead.",
  "mermaid_cheat_sheet_example_1_title": "Example 1: Simple Flowchart",
  "mermaid_cheat_sheet_example_1_code": "graph TD\n    A[Start] --> B[Step 1]\n    B --> C[Step 2]\n    C --> D[End]",
  "mermaid_cheat_sheet_example_2_title": "Example 2: Flowchart with Labels and Arrow Styles",
  "mermaid_cheat_sheet_example_2_code": "graph LR\n    A[User] -->|Login| B[Server]\n    B ==> C[Database]\n    C -.-> D[Cache]",
  "mermaid_cheat_sheet_example_3_title": "Example 3: Sequence Diagram",
  "mermaid_cheat_sheet_example_3_code": "sequenceDiagram\n    participant A as Alice\n    participant B as Bob\n    A->>B: Hello Bob!\n    B-->>A: Hi Alice!",
  "mermaid_cheat_sheet_example_4_title": "Example 4: Class Diagram",
  "mermaid_cheat_sheet_example_4_code": "classDiagram\n    class Animal {\n        +String name\n        +int age\n        +makeSound()\n    }\n    class Dog {\n        +String breed\n        +bark()\n    }\n    Animal <|-- Dog",
  "mermaid_cheat_sheet_example_5_title": "Example 5: State Diagram",
  "mermaid_cheat_sheet_example_5_code": "stateDiagram-v2\n    [*] --> Initial\n    Initial --> Processing : Start\n    Processing --> Success : Complete\n    Processing --> Failure : Error\n    Success --> [*]\n    Failure --> [*]",
  "mermaid_cheat_sheet_example_6_title": "Example 6: Flowchart with Custom Styles",
  "mermaid_cheat_sheet_example_6_code": "graph TD\n    A[Client] -->|Request| B[Server]\n    B --> C[Database]\n    C --> D[Response]\n    D --> B\n    B --> A\n    classDef important fill:#f9a825,stroke:#333,stroke-width:2px\n    class A,B important",
  "mermaid_cheat_sheet_supported_types": "- `graph TD`: Flowchart (top-down).\n- `graph LR`: Flowchart (left-to-right).\n- `sequenceDiagram`: Sequence diagram.\n- `classDiagram`: Class diagram.\n- `stateDiagram`: State diagram.\n- `gantt`: Gantt chart.\n- `pie`: Pie chart.\n- `erDiagram`: Entity-Relationship diagram.",
  "mermaid_cheat_sheet_common_errors": "- **Semicolons (`;`):** Do not add semicolons after arrows or at the end of lines. Incorrect: `A --> B;`. Correct: `A --> B`.\n- **Missing Spaces:** Ensure there is a space before and after arrows (`-->`, `|Text|`). Incorrect: `A-->B`. Correct: `A --> B`.\n- **Indentation:** Indentation is not strictly required but improves readability.\n- **Wrong Diagram Type:** Ensure the diagram type matches the syntax used (e.g., `sequenceDiagram` for sequence diagrams).",
  "mermaid_cheat_sheet_styling_tips": "- **Customize Nodes:** Use `classDef` to define styles. Example: `classDef important fill:#f9a825,stroke:#333,stroke-width:2px`.\n- **Apply Styles:** Add a class to a node with `class NodeName ClassName`, e.g., `class A important`.\n- **Arrow Colors:** Use `stroke` in `classDef` to change arrow colors.\n- **Themes:** Change the global theme with `mermaid.initialize({ theme: 'dark' })` (e.g., `default`, `dark`, `forest`, `neutral`).",
  "mermaid_cheat_sheet_use_cases": "- **Flowcharts:** Ideal for representing business processes or workflows (e.g., project steps).\n- **Sequence Diagrams:** Perfect for showing interactions between actors in a system (e.g., client-server communication).\n- **Class Diagrams:** Useful for modeling object-oriented structures (e.g., class relationships).\n- **State Diagrams:** Represent state transitions in a system (e.g., object lifecycle).\n- **Gantt Charts:** Plan projects with tasks and durations.\n- **Entity-Relationship Diagrams:** Model relational databases.",
  "mermaid_cheat_sheet_tips": "- Use square brackets for rectangular nodes: `A[Text]`.\n- Use parentheses for round nodes: `A(Text)`.\n- Use curly braces for diamond nodes: `A{Text}`.\n- Add subgraphs with `subgraph Name [Title]` to organize complex diagrams.\n- Use comments with `%% Comment` to document your code.\n- Test your diagrams with simple examples before adding complexity.",
  "mermaid_cheat_sheet_show": "Show Help",
  "mermaid_cheat_sheet_hide": "Hide Help",
  "mermaid_cheat_sheet_insert_example_1": "Insert Example 1",
  "mermaid_cheat_sheet_insert_example_2": "Insert Example 2",
  "mermaid_cheat_sheet_insert_example_3": "Insert Example 3",
  "mermaid_cheat_sheet_insert_example_4": "Insert Example 4",
  "mermaid_cheat_sheet_insert_example_5": "Insert Example 5",
  "mermaid_cheat_sheet_insert_example_6": "Insert Example 6",
  "export_svg": "Export as SVG",
  "export_png": "Export as PNG",
  "logic_tests_title": "Logic & Soft Skills Challenges",
  "logic_test_1_title": "Challenge 1: The Clock Angle at 3:15 PM",
  "logic_test_1_description": "It’s 3:15 PM. What is the angle in degrees between the hour and minute hands? Be careful, the clock might be a bit tricky!",
  "logic_test_1_answer_label": "Your answer (in degrees):",
  "logic_test_1_submit": "Submit",
  "logic_test_1_correction": "At 3:00 PM, the hour hand is on the 3 (90°). At 3:15 PM, the minute hand is also on the 3 (90°), but the hour hand has moved a quarter of the next hour (one hour slot = 30°, so a quarter = 7.5°). The angle between them is therefore 7.5°.",
  "logic_test_1_soft_skills": "Analytical Thinking, Focus Under Pressure",
  "logic_test_2_title": "Challenge 2: Sock Colors",
  "logic_test_2_description": "You have a drawer with 6 black socks, 10 red socks, and 8 blue socks, mixed in the dark. How many socks must you draw to be sure of having a pair of the same color? Drag the socks into the area below to experiment, then enter your answer!",
  "logic_test_2_hint": "Hint: Think about the worst-case scenario to guarantee a pair!",
  "logic_test_2_answer_label": "How many socks do you need to draw?",
  "logic_test_2_submit": "Submit",
  "logic_test_2_correction": "There are 3 colors, so in the worst case, you draw one sock of each color (3 socks). The 4th sock will definitely be the same color as one of the previous ones, ensuring a pair. Answer: 4 socks.",
  "logic_test_2_soft_skills": "Probabilistic Reasoning, Quick Decision-Making, Distraction Management",
  "logic_test_3_title": "Challenge 3: The Farmer and the River",
  "logic_test_3_description": "A farmer must cross a river with a wolf, a goat, and a cabbage. He can only carry one item at a time, and he cannot leave the wolf alone with the goat (the wolf would eat the goat), nor the goat alone with the cabbage (the goat would eat the cabbage). Help him get everything across in the minimum number of crossings!",
  "logic_test_3_submit": "Finish",
  "logic_test_3_wolf_eats_goat": "The wolf ate the goat!",
  "logic_test_3_goat_eats_cabbage": "The goat ate the cabbage!",
  "logic_test_3_correction": "The farmer must make 7 crossings: 1) Take the goat, 2) Return alone, 3) Take the cabbage, 4) Bring back the goat, 5) Take the wolf, 6) Return alone, 7) Take the goat.",
  "logic_test_3_soft_skills": "Planning, Stress Management, Problem Solving",
  "logic_test_4_title": "Challenge 4: Color Personality Test",
  "logic_test_4_description": "Choose the color that best represents you: Red (action, energy), Blue (analytical, logical), Green (empathy, communication), Yellow (creativity, imagination). But beware, the colors are moving!",
  "logic_test_4_result_red": "You are a person of action and energy (Dominance).",
  "logic_test_4_result_blue": "You are analytical and logical (Influence).",
  "logic_test_4_result_green": "You are empathetic and communicative (Stability).",
  "logic_test_4_result_yellow": "You are creative and imaginative (Conformity).",
  "logic_test_4_correction": "There is no wrong answer, but you had to choose a color before time ran out!",
  "logic_test_4_soft_skills": "Quick Decision-Making, Adaptability, Concentration",
  "logic_test_5_title": "Challenge 5: The Three Houses",
  "logic_test_5_description": "There are three houses (A, B, C) and three utilities (water, electricity, gas). Each house must be connected to each utility, but the cables must not cross. Connect the cables correctly!",
  "logic_test_5_service_water": "Water",
  "logic_test_5_service_electricity": "Electricity",
  "logic_test_5_service_gas": "Gas",
  "logic_test_5_submit": "Submit",
  "logic_test_5_correction": "In a 2D plane, it is impossible to connect each house to each utility without crossing (a classic three houses problem). However, for this challenge, an orderly solution is accepted: for example, A-water, B-electricity, C-gas, avoiding visible crossings.",
  "logic_test_5_soft_skills": "Spatial Problem Solving, Patience, Concentration",
  "logic_test_6_title": "Challenge 6: Weighing the Coins",
  "logic_test_6_description": "You have 9 coins, 8 of which have the same weight, and 1 is lighter. You have a scale and can make 2 weighings to find the lighter coin. Identify it!",
  "logic_test_6_weigh": "Weigh",
  "logic_test_6_answer_label": "Which coin is lighter?",
  "logic_test_6_submit": "Submit",
  "logic_test_6_max_weighs": "You have already made 2 weighings!",
  "logic_test_6_empty_pans": "Please place coins on both pans!",
  "logic_test_6_too_many_coins": "Too many coins! The scale breaks!",
  "logic_test_6_correction": "Divide the 9 coins into 3 groups of 3. Weigh two groups: if one group is lighter, the light coin is in that group; otherwise, it’s in the unweighed group. Take that group of 3, weigh two coins: if one is lighter, that’s the one; otherwise, it’s the third.",
  "logic_test_6_soft_skills": "Logical Reasoning, Strategy, Time Management",
  "logic_test_7_title": "Challenge 7: The Secret Code",
  "logic_test_7_description": "A safe has a 4-digit code. You have 4 visual clues to guess the code. Find it before the safe self-destructs!",
  "logic_test_7_submit": "Submit",
  "logic_test_7_correction": "Use the visual clues to determine each digit of the 4-digit code. Each symbol corresponds to one digit of the code.",
  "logic_test_7_soft_skills": "Observation, Memory, Distraction Management",
  "logic_test_8_title": "Challenge 8: Crossing the Desert",
  "logic_test_8_description": "You must cross a desert with a caravan. You have 3 camels, each able to carry 1 liter of water, and the desert requires 5 liters to cross. You can fill the camels at oases, but each oasis disappears after a short time. How many oases do you need to visit to cross the desert?",
  "logic_test_8_liters": "liters",
  "logic_test_8_answer_label": "How many oases do you need to visit?",
  "logic_test_8_submit": "Submit",
  "logic_test_8_correction": "Each camel can carry 1 liter of water, and you have 3 camels, so you can get 3 liters per oasis. To get 5 liters, you need to visit 2 oases: 3 liters at the first, and 2 liters at the second. Answer: 2 oases.",
  "logic_test_8_soft_skills": "Resource Management, Planning, Quick Decision-Making",
  "logic_test_9_title": "Challenge 9: Switches and Bulbs",
  "logic_test_9_description": "You are in a room with 3 switches (1, 2, 3) and 3 bulbs (A, B, C) in another room. Each switch controls one bulb, but you don’t know which. You can turn the switches on/off, then go see the bulbs once. Match each switch to its bulb!",
  "logic_test_9_switch": "Switch",
  "logic_test_9_visit": "Go see the bulbs",
  "logic_test_9_submit": "Submit",
  "logic_test_9_correction": "One strategy is to turn on switch 1 for 5 minutes, then turn it off and turn on switch 2, then go see: the bulb that’s on is controlled by switch 2, the bulb that’s off but warm by switch 1, and the bulb that’s off and cold by switch 3.",
  "logic_test_9_soft_skills": "Deductive Logic, Strategy, Time Management",
  "logic_test_10_title": "Challenge 10: The Logical Maze",
  "logic_test_10_description": "You are in a maze with 5 intersections. At each intersection, a logical clue tells you which direction to take (e.g., 'If you come from the north, go east'). Find the exit in the minimum number of moves!",
  "logic_test_10_up": "Up",
  "logic_test_10_down": "Down",
  "logic_test_10_left": "Left",
  "logic_test_10_right": "Right",
  "logic_test_10_answer_label": "Minimum number of moves?",
  "logic_test_10_submit": "Submit",
  "logic_test_10_clue_from": "If you come from",
  "logic_test_10_clue_to": "go to",
  "logic_test_10_direction_north": "north",
  "logic_test_10_direction_south": "south",
  "logic_test_10_direction_east": "east",
  "logic_test_10_direction_west": "west",
  "logic_test_10_no_clue": "No clue here.",
  "logic_test_10_fake_exit": "Exit",
  "logic_test_10_correction": "The maze is designed to require a minimum of 5 moves. Follow the clues at each intersection to reach the exit at the bottom right.",
  "logic_test_10_soft_skills": "Logical Reasoning, Spatial Orientation, Distraction Management",
  "start_challenge": "Start Challenge",
  "challenge_success": "Success!",
  "challenge_failure": "Failed!",
  "soft_skills_evaluated": "Soft skills evaluated:",
  "back_to_list": "Back to List"
}
